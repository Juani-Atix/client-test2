#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _assignIn = require('lodash/assignIn');

var _assignIn2 = _interopRequireDefault(_assignIn);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _addScript = require('../scripts/utils/addScript');

var _addScript2 = _interopRequireDefault(_addScript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.MD_LOG_LEVEL = 'ALL';
/* eslint-disable global-require */


var join = _path2.default.join;
var cmd = process.argv[2];

/* eslint-disable no-console */
var log = console.log;
var error = console.error;
var info = console.info;
var warn = console.warn;
/* eslint-enable no-console */

/**
 * Looks for .meteor directory.
 * @param {string} appPath - Meteor app path
 */
function isMeteorApp(appPath) {
    var meteorPath = join(appPath, '.meteor');
    try {
        return _fs2.default.statSync(meteorPath).isDirectory();
    } catch (e) {
        return false;
    }
}

/**
 * Just ensures a ddp url is set.
 *
 * @param {string|null} ddpUrl - the url that Meteor app connects to
 * @returns {string|null}
 */
function getDdpUrl() {
    var ddpUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (!ddpUrl && _commander2.default.buildMeteor) {
        info('no ddp_url specified, setting default: http://127.0.0.1:3000');
        return 'http://127.0.0.1:3000';
    }
    return ddpUrl;
}

// --------------------------

_commander2.default.option('-b, --build-meteor', 'runs meteor to obtain the mobile build, kills it after').option('-t, --build-timeout <timeout_in_sec>', 'timeout value when waiting for ' + 'meteor to build, default 600sec').option('-p, --port <port>', 'port on which meteor is running, when with -b this will be passed to meteor when obtaining the build').option('--production', 'builds meteor app with the production switch, uglifies contents ' + 'of .desktop, packs app to app.asar').option('-a, --android', 'force adding android as a mobile platform instead of ios').option('-s, --scaffold', 'will scaffold .desktop if not present').option('--meteor-settings <path>', 'only with -b, adds --settings options to meteor').option('--ia32', 'generate 32bit installer/package').option('--all-archs', 'generate 32bit and 64bit installers').option('--win', 'generate Windows installer').option('--linux', 'generate Linux installer').option('--mac', 'generate Mac installer');

_commander2.default.usage('[command] [options]').version(require('./../../package.json').version, '-V, --version').on('--help', function () {
    log('  [ddp_url] - pass a ddp url if you want to use different one than used in meteor\'s --mobile-server');
    log('              this will also work with -b');
    log('    ');
    log('  Examples:');
    log('');
    log('   ', ['# cd into meteor dir first', 'cd /your/meteor/app', 'meteor --mobile-server=127.0.0.1:3000', '', '# open new terminal, assuming you have done npm install --save-dev meteor-desktop', 'npm run desktop -- init', 'npm run desktop'].join('\n    '));
    log('\n');
});

function verifyArgsSyntax() {
    if (process.env.npm_config_argv) {
        var npmArgv = void 0;
        try {
            (function () {
                var args = ['-b', '--build-meteor', '-t', '--build-timeout', '-p', '--port', '--production', '-a', '--android', '-s', '--scaffold', '--ia32', '--win', '--linux', '--all-archs', '--win', '--mac', '--meteor-settings'];
                npmArgv = JSON.parse(process.env.npm_config_argv);
                if (npmArgv.remain.length === 0 && npmArgv.original.length > 2) {
                    if (npmArgv.original.some(function (arg) {
                        return !!~args.indexOf(arg);
                    })) {
                        warn('WARNING: seems that you might used the wrong console syntax, no ` --' + ' ` delimiter was found, be sure you are invoking meteor-desktop with' + ' it when passing commands or options -> ' + '`npm run desktop -- command --option`\n');
                    }
                }
            })();
        } catch (e) {
            // Not sure if `npm_config_argv` is always present...
        }
    }
}

function meteorDesktopFactory(ddpUrl) {
    var production = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    info('METEOR-DESKTOP v' + require('./../../package.json').version + '\n');

    verifyArgsSyntax();

    var input = process.cwd();

    if (!isMeteorApp(input)) {
        error('not in a meteor app dir\n ' + input);
        process.exit();
    }

    if (!_commander2.default.output) {
        _commander2.default.output = input;
    }

    if (production && !_commander2.default.production) {
        info('package/build-installer implies setting --production, setting it for you');
    }

    if (!_commander2.default.buildMeteor) {
        _commander2.default.port = _commander2.default.port || 3000;
        info('REMINDER: your Meteor project should be running now on port ' + _commander2.default.port + '\n');
    }

    var options = {
        ddpUrl: ddpUrl,
        skipMobileBuild: _commander2.default.buildMeteor ? !_commander2.default.buildMeteor : true,
        production: _commander2.default.production || production
    };

    (0, _assignIn2.default)(options, _commander2.default);

    return (0, _2.default)(input, _commander2.default.output, options);
}

function run(ddpUrl) {
    meteorDesktopFactory(getDdpUrl(ddpUrl)).run();
}

function build(ddpUrl) {
    meteorDesktopFactory(getDdpUrl(ddpUrl)).build();
}

function init() {
    meteorDesktopFactory().init();
}

function justRun() {
    meteorDesktopFactory().justRun();
}

function runPackager(ddpUrl) {
    meteorDesktopFactory(getDdpUrl(ddpUrl), true).runPackager();
}

function buildInstaller(ddpUrl) {
    meteorDesktopFactory(getDdpUrl(ddpUrl), true).buildInstaller();
}

function initTestsSupport() {
    log('installing cross-env, ava, meteor-desktop-test-suite and spectron');
    log('running `meteor npm install --save-dev cross-env ava spectron meteor-desktop-test-suite`');

    var code = _shelljs2.default.exec('meteor npm install --save-dev cross-env ava spectron meteor-desktop-test-suite').code;

    if (code !== 0) {
        warn('could not add cross-env, ava and spectron to your `devDependencies`, please do it' + ' manually');
    }

    var test = 'cross-env NODE_ENV=test ava .desktop/**/*.test.js -s --verbose';
    var testWatch = 'cross-env NODE_ENV=test ava .desktop/**/*.test.js -s --verbose' + ' --watch --source .desktop';

    function fail() {
        error('\ncould not add entries to `scripts` in package.json');
        log('please try to add it manually\n');
        log('test-desktop: ' + test);
        log('test-desktop-watch: ' + testWatch);
    }

    var packageJsonPath = _path2.default.resolve(_path2.default.join(process.cwd(), 'package.json'));

    (0, _addScript2.default)('test-desktop', test, packageJsonPath, fail);
    (0, _addScript2.default)('test-desktop-watch', testWatch, packageJsonPath, fail);

    log('\nadded test-desktop and test-desktop-watch entries');
    log('run the test with `npm run test-desktop`');
}

_commander2.default.command('init').description('scaffolds .desktop dir in the meteor app').action(init);

_commander2.default.command('run [ddp_url]').description('(default) builds and runs desktop app').action(run);

_commander2.default.command('build [ddp_url]').description('builds your desktop app').action(build);

_commander2.default.command('build-installer [ddp_url]').description('creates the installer').action(buildInstaller);

_commander2.default.command('just-run').description('alias for running `electron .` in `.meteor/desktop-build`').action(justRun);

_commander2.default.command('package [ddp_url]').description('runs electron packager').action(runPackager);

_commander2.default.command('init-tests-support').description('prepares project for running functional tests of desktop app').action(initTestsSupport);

if (process.argv.length === 2 || !~'-h|--help|run|init|build|build-installer|just-run|init-tests-support|package'.indexOf(cmd)) {
    var argv = process.argv;
    if (process.argv.length === 2) {
        argv.push('run');
    } else {
        var command = argv.splice(0, 2);
        command = command.concat('run', argv);
        argv = command;
    }
    _commander2.default.parse(argv);
} else {
    _commander2.default.parse(process.argv);
}
//# sourceMappingURL=data:application/json;base64,