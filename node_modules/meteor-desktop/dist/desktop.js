'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _hashFiles = require('hash-files');

var _hashFiles2 = _interopRequireDefault(_hashFiles);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_shelljs2.default.config.fatal = true;

/**
 * Checks if the path is empty.
 * @param {string} searchPath
 * @returns {boolean}
 */
function isEmptySync(searchPath) {
    var stat = void 0;
    try {
        stat = _fs2.default.statSync(searchPath);
    } catch (e) {
        return true;
    }
    if (stat.isDirectory()) {
        var items = _fs2.default.readdirSync(searchPath);
        return !items || !items.length;
    }
    return false;
}

/**
 * Represents the .desktop directory.
 * @class
 * @property {desktopSettings} settings
 */

var Desktop = function () {

    /**
     * @param {MeteorDesktop} $ - context
     *
     * @constructor
     */
    function Desktop($) {
        (0, _classCallCheck3.default)(this, Desktop);

        this.$ = $;
        this.log = new _log2.default('desktop');
        this.settings = null;
    }

    /**
     * Tries to read and returns settings.json contents from .desktop dir.
     *
     * @returns {desktopSettings|null}
     */


    (0, _createClass3.default)(Desktop, [{
        key: 'getSettings',
        value: function getSettings() {
            if (!this.settings) {
                try {
                    this.settings = JSON.parse(_fs2.default.readFileSync(this.$.env.paths.desktop.settings, 'UTF-8'));
                } catch (e) {
                    this.log.error('error while trying to read \'.desktop/settings.json\': ', e);
                    process.exit(1);
                }
            }
            return this.settings;
        }

        /**
         * Returns a version hash representing current .desktop contents.
         * @returns {string}
         */

    }, {
        key: 'getHashVersion',
        value: function getHashVersion() {
            this.log.info('calculating hash version from .desktop contents');
            var version = _hashFiles2.default.sync({
                files: ['' + this.$.env.paths.desktop.root + _path2.default.sep + '**']
            });
            this.log.verbose('calculated .desktop hash version is ' + version);
            return version;
        }

        /**
         * Tries to read a module.json file from a module at provided path.
         *
         * @param {string} modulePath - path to the module dir
         * @returns {Object}
         */

    }, {
        key: 'getModuleConfig',
        value: function getModuleConfig(modulePath) {
            var moduleConfig = {};
            try {
                moduleConfig = JSON.parse(_fs2.default.readFileSync(_path2.default.join(modulePath, 'module.json'), 'UTF-8'));
            } catch (e) {
                this.log.error('error while trying to read \'module.json\' from \'' + modulePath + '\' module: ', e);
                process.exit(1);
            }
            if (!('name' in moduleConfig)) {
                this.log.error('no \'name\' field defined in \'module.json\' in \'' + modulePath + '\' module.');
                process.exit(1);
            }
            return moduleConfig;
        }

        /**
         * Scans all modules for module.json and gathers this configuration altogether.
         *
         * @returns {[]}
         */

    }, {
        key: 'gatherModuleConfigs',
        value: function gatherModuleConfigs() {
            var _this = this;

            var configs = [];

            if (!isEmptySync(this.$.env.paths.desktop.modules)) {
                _shelljs2.default.ls('-d', _path2.default.join(this.$.env.paths.desktop.modules, '*')).forEach(function (module) {
                    if (_fs2.default.lstatSync(module).isDirectory()) {
                        var moduleConfig = _this.getModuleConfig(module);
                        moduleConfig.dirName = _path2.default.parse(module).name;
                        configs.push(moduleConfig);
                    }
                });
            }
            return configs;
        }

        /**
         * Summarizes all dependencies defined in .desktop.
         *
         * @params {Object} settings      - settings.json
         * @params {boolean} checkModules - whether to gather modules dependencies
         * @returns {{fromSettings: {}, plugins: {}, modules: {}}}
         */

    }, {
        key: 'getDependencies',
        value: function getDependencies() {
            var _this2 = this;

            var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var checkModules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var dependencies = {
                fromSettings: {},
                plugins: {},
                modules: {}
            };
            /** @type {desktopSettings} **/
            var settingsJson = settings || this.getSettings();

            // Settings can have a 'dependencies' field.
            if ('dependencies' in settingsJson) {
                dependencies.fromSettings = settingsJson.dependencies;
            }

            // Plugins are also a npm packages.
            if ('plugins' in settingsJson) {
                dependencies.plugins = (0, _keys2.default)(settingsJson.plugins).reduce(function (plugins, plugin) {
                    /* eslint-disable no-param-reassign */
                    if ((0, _typeof3.default)(settingsJson.plugins[plugin]) === 'object') {
                        plugins[plugin] = settingsJson.plugins[plugin].version;
                    } else {
                        plugins[plugin] = settingsJson.plugins[plugin];
                    }
                    return plugins;
                }, {});
            }

            // Each module can have its own dependencies defined.
            var moduleDependencies = {};
            if (checkModules) {
                var configs = this.gatherModuleConfigs();

                configs.forEach(function (moduleConfig) {
                    if (!('dependencies' in moduleConfig)) {
                        moduleConfig.dependencies = {};
                    }
                    if (moduleConfig.name in moduleDependencies) {
                        _this2.log.error('duplicate name \'' + moduleConfig.name + '\' in \'module.json\' in ' + ('\'' + moduleConfig.dirName + '\' - another module already registered the same name.'));
                        process.exit(1);
                    }
                    moduleDependencies[moduleConfig.name] = moduleConfig.dependencies;
                });
            }

            dependencies.modules = moduleDependencies;
            return dependencies;
        }

        /**
         * Copies the .desktop scaffold into the meteor app dir.
         * Adds entry to .meteor/.gitignore.
         */

    }, {
        key: 'scaffold',
        value: function scaffold() {
            this.log.info('creating .desktop scaffold in your project');

            if (this.$.utils.exists(this.$.env.paths.desktop.root)) {
                this.log.warn('.desktop already exists - delete it if you want a new one to be ' + 'created');
                return;
            }

            _shelljs2.default.cp('-r', this.$.env.paths.scaffold, this.$.env.paths.desktop.root);
            _shelljs2.default.mkdir(this.$.env.paths.desktop.import);
            this.log.info('.desktop directory prepared');
        }

        /**
         * Verifies if all mandatory files are present in the .desktop.
         *
         * @returns {boolean}
         */

    }, {
        key: 'check',
        value: function check() {
            this.log.verbose('checking .desktop existence');
            return !!(this.$.utils.exists(this.$.env.paths.desktop.root) && this.$.utils.exists(this.$.env.paths.desktop.settings) && this.$.utils.exists(this.$.env.paths.desktop.desktop));
        }
    }]);
    return Desktop;
}();

/**
 * @typedef {Object} desktopSettings
 * @property {string} name
 * @property {string} projectName
 * @property {boolean} devTools
 * @property {boolean} devtron
 * @property {boolean} desktopHCP
 * @property {string} autoUpdateFeedUrl
 * @property {Object} autoUpdateFeedHeaders
 * @property {Object} autoUpdateManualCheck
 * @property {Object} desktopHCPSettings
 * @property {boolean} desktopHCPSettings.ignoreCompatibilityVersion
 * @property {boolean} desktopHCPSettings.blockAppUpdateOnDesktopIncompatibility
 * @property {number} webAppStartupTimeout
 * @property {Object} window
 * @property {Object} windowDev
 * @property {Object} packageJsonFields
 * @property {Object} builderOptions
 * @property {Object} packagerOptions
 * @property {Object} plugins
 * @property {Object} dependencies
 * @property {boolean} uglify
 * @property {string} version
 **/


exports.default = Desktop;
//# sourceMappingURL=data:application/json;base64,