'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _setImmediate2 = require('babel-runtime/core-js/set-immediate');

var _setImmediate3 = _interopRequireDefault(_setImmediate2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _crossSpawn = require('cross-spawn');

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _singleLineLog = require('single-line-log');

var _singleLineLog2 = _interopRequireDefault(_singleLineLog);

var _asar = require('asar');

var _asar2 = _interopRequireDefault(_asar);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _isDesktopInjector = require('../skeleton/modules/autoupdate/isDesktopInjector');

var _isDesktopInjector2 = _interopRequireDefault(_isDesktopInjector);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var join = _path2.default.join;

var sll = _singleLineLog2.default.stdout;

// TODO: refactor all strategy ifs to one place

/**
 * Represents the Meteor app.
 * @property {MeteorDesktop} $
 * @class
 */

var MeteorApp = function () {

    /**
     * @param {MeteorDesktop} $ - context
     * @constructor
     */
    function MeteorApp($) {
        (0, _classCallCheck3.default)(this, MeteorApp);

        this.log = new _log2.default('meteorApp');
        this.$ = $;
        this.mobilePlatform = null;
        this.oldManifest = null;
        this.injector = new _isDesktopInjector2.default();
        this.matcher = new RegExp('__meteor_runtime_config__ = JSON.parse\\(decodeURIComponent\\("([^"]*)"\\)\\)');
        this.replacer = new RegExp('(__meteor_runtime_config__ = JSON.parse\\(decodeURIComponent\\()"([^"]*)"(\\)\\))');
        this.meteorVersion = null;
        this.indexHTMLstrategy = null;

        this.indexHTMLStrategies = {
            INDEX_FROM_CORDOVA_BUILD: 1,
            INDEX_FROM_RUNNING_SERVER: 2
        };
    }

    /**
     * Looks for specified packages in .meteor/packages. In other words checks if the project has
     * specified packages added.
     * @param {Array} packages
     * @returns {boolean}
     */


    (0, _createClass3.default)(MeteorApp, [{
        key: 'checkPackages',
        value: function checkPackages(packages) {
            var usedPackages = _fs2.default.readFileSync(this.$.env.paths.meteorApp.packages, 'UTF-8').split('\n');
            return !packages.some(function (packageToFind) {
                return !usedPackages.some(function (meteorPackage) {
                    return ~meteorPackage.indexOf(packageToFind);
                });
            });
        }

        /**
         * Looks for specified packages in .meteor/packages. In other words checks if the project has
         * specified packages added.
         * @param {Array} packages
         * @returns {boolean}
         */

    }, {
        key: 'checkPackagesVersion',
        value: function checkPackagesVersion(packages) {
            var usedPackages = _fs2.default.readFileSync(this.$.env.paths.meteorApp.versions, 'UTF-8').split('\n');
            return !packages.some(function (packageToFind) {
                return !usedPackages.some(function (meteorPackage) {
                    return meteorPackage === packageToFind;
                });
            });
        }

        /**
         * Ensures certain packages are added to meteor project and in correct version.
         * @param {Array} packages
         * @param {Array} packagesWithVersion
         * @param {string} who - name of the entity that requests presence of thos packages (can be the
         *                       integration itself or a plugin)
         * @returns {Promise.<void>}
         */

    }, {
        key: 'ensurePackages',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(packages, packagesWithVersion, who) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (this.checkPackages(packages)) {
                                    _context.next = 10;
                                    break;
                                }

                                this.log.warn(who + ' requires some packages that are not added to project, will try to add them now');
                                _context.prev = 2;
                                _context.next = 5;
                                return this.addPackages(packages, packagesWithVersion);

                            case 5:
                                _context.next = 10;
                                break;

                            case 7:
                                _context.prev = 7;
                                _context.t0 = _context['catch'](2);
                                throw new Error(_context.t0);

                            case 10:
                                if (this.checkPackagesVersion(packagesWithVersion)) {
                                    _context.next = 20;
                                    break;
                                }

                                this.log.warn(who + ' required packages version is different, fixing it');
                                _context.prev = 12;
                                _context.next = 15;
                                return this.addPackages(packages, packagesWithVersion);

                            case 15:
                                _context.next = 20;
                                break;

                            case 17:
                                _context.prev = 17;
                                _context.t1 = _context['catch'](12);
                                throw new Error(_context.t1);

                            case 20:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[2, 7], [12, 17]]);
            }));

            function ensurePackages(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return ensurePackages;
        }()

        /**
         * Ensures that required packages are added to the Meteor app.
         */

    }, {
        key: 'ensureDesktopHCPPackages',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                var _this = this;

                var packages, packagesWithVersion;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!this.$.desktop.getSettings().desktopHCP) {
                                    _context2.next = 14;
                                    break;
                                }

                                this.log.verbose('desktopHCP is enabled, checking for required packages');

                                packages = ['omega:meteor-desktop-watcher', 'omega:meteor-desktop-bundler'];
                                packagesWithVersion = packages.map(function (packageName) {
                                    return packageName + '@' + _this.$.getVersion();
                                });
                                _context2.prev = 4;
                                _context2.next = 7;
                                return this.ensurePackages(packages, packagesWithVersion, 'desktopHCP');

                            case 7:
                                _context2.next = 12;
                                break;

                            case 9:
                                _context2.prev = 9;
                                _context2.t0 = _context2['catch'](4);
                                throw new Error(_context2.t0);

                            case 12:
                                _context2.next = 15;
                                break;

                            case 14:
                                this.log.verbose('desktopHCP is not enabled, skipping checking for required packages');

                            case 15:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[4, 9]]);
            }));

            function ensureDesktopHCPPackages() {
                return _ref2.apply(this, arguments);
            }

            return ensureDesktopHCPPackages;
        }()

        /**
         * Adds packages to the meteor app.
         * @param {Array} packages            - array with names of the packages to add
         * @param {Array} packagesWithVersion - array with names and versions of the packages to add
         */

    }, {
        key: 'addPackages',
        value: function addPackages(packages, packagesWithVersion) {
            var _this2 = this;

            this.log.info('adding packages to meteor project', packagesWithVersion);
            return new _promise2.default(function (resolve, reject) {
                (0, _crossSpawn2.default)('meteor', ['add'].concat(packagesWithVersion.map(function (packageName) {
                    return packageName.replace('@', '@=');
                })), {
                    cwd: _this2.$.env.paths.meteorApp.root,
                    stdio: ['pipe', 'pipe', process.stderr],
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0, METEOR_NO_RELEASE_CHECK: 1 }, process.env)
                }).on('exit', function (code) {
                    if (code !== 0 || !_this2.checkPackages(packages)) {
                        reject('adding packages failed');
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Adds entry to .meteor/.gitignore if necessary.
         */

    }, {
        key: 'updateGitIgnore',
        value: function updateGitIgnore() {
            this.log.verbose('updating .meteor/.gitignore');
            // Lets read the .meteor/.gitignore and filter out blank lines.
            var gitIgnore = _fs2.default.readFileSync(this.$.env.paths.meteorApp.gitIgnore, 'UTF-8').split('\n').filter(function (ignoredPath) {
                return ignoredPath.trim() !== '';
            });

            if (!~gitIgnore.indexOf(this.$.env.paths.electronApp.rootName)) {
                this.log.verbose('adding ' + this.$.env.paths.electronApp.rootName + ' to .meteor/.gitignore');
                gitIgnore.push(this.$.env.paths.electronApp.rootName);

                _fs2.default.writeFileSync(this.$.env.paths.meteorApp.gitIgnore, gitIgnore.join('\n'), 'UTF-8');
            }
        }

        /**
         * Reads the Meteor release version used in the app.
         * @returns {string}
         */

    }, {
        key: 'getMeteorRelease',
        value: function getMeteorRelease() {
            var release = _fs2.default.readFileSync(this.$.env.paths.meteorApp.release, 'UTF-8').split('\n')[0];
            release = release.split('@')[1];
            // We do not care if it is beta.
            if (~release.indexOf('-')) {
                release = release.split('-')[0];
            }
            return release;
        }

        /**
         * Validate meteor version against a versionRange.
         * @param {string} versionRange - semver version range
         */

    }, {
        key: 'checkMeteorVersion',
        value: function checkMeteorVersion(versionRange) {
            var release = this.getMeteorRelease();
            release = release.match(/(^\d+\.\d+\.\d+)/gmi)[0];
            if (!_semver2.default.satisfies(release, versionRange)) {
                if (this.$.env.options.skipMobileBuild) {
                    this.log.error('wrong meteor version (' + release + ') in project - only ' + (versionRange + ' is supported'));
                } else {
                    this.log.error('wrong meteor version (' + release + ') in project - only ' + (versionRange + ' is supported for automatic meteor builds (you can always ') + 'try with `--skip-mobile-build` if you are using meteor >= 1.2.1');
                }
                process.exit(1);
            }
        }

        /**
         * Decides which strategy to use while trying to get client build out of Meteor project.
         * @returns {number}
         */

    }, {
        key: 'chooseStrategy',
        value: function chooseStrategy() {
            if (this.$.env.options.forceCordovaBuild) {
                return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
            }

            var release = this.getMeteorRelease().match(/(^\d+\.\d+\.\d+)/gmi)[0];
            if (_semver2.default.satisfies(release, '> 1.3.4')) {
                return this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER;
            }
            if (_semver2.default.satisfies(release, '1.3.4')) {
                var explodedVersion = this.getMeteorRelease().split('.');
                if (explodedVersion.length >= 4) {
                    if (explodedVersion[3] > 1) {
                        return this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER;
                    }
                    return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
                }
            }
            return this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD;
        }

        /**
         * Checks required preconditions.
         * - Meteor version
         * - is mobile platform added
         */

    }, {
        key: 'checkPreconditions',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
                var platforms;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (this.$.env.options.skipMobileBuild) {
                                    this.checkMeteorVersion('>= 1.2.1');
                                } else {
                                    this.checkMeteorVersion('>= 1.3.3');
                                    this.indexHTMLstrategy = this.chooseStrategy();
                                    if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                                        this.log.debug('meteor version is < 1.3.4.2 so the index.html from cordova-build will' + ' be used');
                                    } else {
                                        this.log.debug('meteor version is >= 1.3.4.2 so the index.html will be downloaded ' + 'from __cordova/index.html');
                                    }
                                }

                                if (this.$.env.options.skipMobileBuild) {
                                    _context3.next = 15;
                                    break;
                                }

                                platforms = _fs2.default.readFileSync(this.$.env.paths.meteorApp.platforms, 'UTF-8');

                                if (!(!~platforms.indexOf('android') && !~platforms.indexOf('ios'))) {
                                    _context3.next = 15;
                                    break;
                                }

                                if (!this.$.env.options.android) {
                                    this.mobilePlatform = 'ios';
                                } else {
                                    this.mobilePlatform = 'android';
                                }
                                this.log.warn('no mobile target detected - will add \'' + this.mobilePlatform + '\' ' + 'just to get a mobile build');
                                _context3.prev = 6;
                                _context3.next = 9;
                                return this.addMobilePlatform(this.mobilePlatform);

                            case 9:
                                _context3.next = 15;
                                break;

                            case 11:
                                _context3.prev = 11;
                                _context3.t0 = _context3['catch'](6);

                                this.log.error('failed to add a mobile platform - please try to do it manually');
                                process.exit(1);

                            case 15:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [[6, 11]]);
            }));

            function checkPreconditions() {
                return _ref3.apply(this, arguments);
            }

            return checkPreconditions;
        }()

        /**
         * Tries to add a mobile platform to meteor project.
         * @param {string} platform - platform to add
         * @returns {Promise}
         */

    }, {
        key: 'addMobilePlatform',
        value: function addMobilePlatform(platform) {
            var _this3 = this;

            return new _promise2.default(function (resolve, reject) {
                _this3.log.verbose('adding mobile platform: ' + platform);
                (0, _crossSpawn2.default)('meteor', ['add-platform', platform], {
                    cwd: _this3.$.env.paths.meteorApp.root,
                    stdio: _this3.$.env.stdio
                }).on('exit', function () {
                    var platforms = _fs2.default.readFileSync(_this3.$.env.paths.meteorApp.platforms, 'UTF-8');
                    if (!~platforms.indexOf('android') && !~platforms.indexOf('ios')) {
                        reject();
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Tries to remove a mobile platform from meteor project.
         * @param {string} platform - platform to remove
         * @returns {Promise}
         */

    }, {
        key: 'removeMobilePlatform',
        value: function removeMobilePlatform(platform) {
            var _this4 = this;

            return new _promise2.default(function (resolve, reject) {
                _this4.log.verbose('removing mobile platform: ' + platform);
                (0, _crossSpawn2.default)('meteor', ['remove-platform', platform], {
                    cwd: _this4.$.env.paths.meteorApp.root,
                    stdio: _this4.$.env.stdio,
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0 }, process.env)
                }).on('exit', function () {
                    var platforms = _fs2.default.readFileSync(_this4.$.env.paths.meteorApp.platforms, 'UTF-8');
                    if (~platforms.indexOf(platform)) {
                        reject();
                    } else {
                        resolve();
                    }
                });
            });
        }

        /**
         * Just checks for index.html and program.json existence.
         * @returns {boolean}
         */

    }, {
        key: 'isCordovaBuildReady',
        value: function isCordovaBuildReady() {
            if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                return this.$.utils.exists(this.$.env.paths.meteorApp.cordovaBuildIndex) && this.$.utils.exists(this.$.env.paths.meteorApp.cordovaBuildProgramJson) && (!this.oldManifest || this.oldManifest && this.oldManifest !== _fs2.default.readFileSync(this.$.env.paths.meteorApp.cordovaBuildProgramJson, 'UTF-8'));
            }
            return this.$.utils.exists(this.$.env.paths.meteorApp.webCordovaProgramJson) && (!this.oldManifest || this.oldManifest && this.oldManifest !== _fs2.default.readFileSync(this.$.env.paths.meteorApp.webCordovaProgramJson, 'UTF-8'));
        }

        /**
         * Fetches index.html from running project.
         * @returns {Promise.<*>}
         */

    }, {
        key: 'acquireIndex',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                var port, res, text;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                port = this.$.env.options.port ? this.$.env.options.port : 3080;

                                this.log.info('acquiring index.html');
                                _context4.next = 4;
                                return (0, _nodeFetch2.default)('http://127.0.0.1:' + port + '/__cordova/index.html');

                            case 4:
                                res = _context4.sent;
                                _context4.next = 7;
                                return res.text();

                            case 7:
                                text = _context4.sent;

                                if (!~text.indexOf('src="/cordova.js"')) {
                                    _context4.next = 10;
                                    break;
                                }

                                return _context4.abrupt('return', text);

                            case 10:
                                return _context4.abrupt('return', false);

                            case 11:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function acquireIndex() {
                return _ref4.apply(this, arguments);
            }

            return acquireIndex;
        }()

        /**
         * Fetches mainfest.json from running project.
         * @returns {Promise.<void>}
         */

    }, {
        key: 'acquireManifest',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
                var port, res, text;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                port = this.$.env.options.port ? this.$.env.options.port : 3080;

                                this.log.info('acquiring manifest.json');
                                _context5.next = 4;
                                return (0, _nodeFetch2.default)('http://127.0.0.1:' + port + '/__cordova/manifest.json?meteor_dont_serve_index=true');

                            case 4:
                                res = _context5.sent;
                                _context5.next = 7;
                                return res.text();

                            case 7:
                                text = _context5.sent;
                                return _context5.abrupt('return', JSON.parse(text));

                            case 9:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function acquireManifest() {
                return _ref5.apply(this, arguments);
            }

            return acquireManifest;
        }()

        /**
         * Tries to get a mobile build from meteor app.
         * In case of failure leaves a meteor.log.
         * A lot of stuff is happening here - but the main aim is to get a mobile build from
         * .meteor/local/cordova-build/www/application and exit as soon as possible.
         *
         * @returns {Promise}
         */

    }, {
        key: 'buildMobileTarget',
        value: function buildMobileTarget() {
            var _this5 = this;

            var programJson = this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD ? this.$.env.paths.meteorApp.cordovaBuildProgramJson : this.$.env.paths.meteorApp.webCordovaProgramJson;

            if (this.$.utils.exists(programJson)) {
                this.oldManifest = _fs2.default.readFileSync(programJson, 'UTF-8');
            }

            return new _promise2.default(function (resolve, reject) {
                var self = _this5;
                var log = '';
                var desiredExit = false;
                var buildTimeout = null;
                var errorTimeout = null;
                var messageTimeout = null;
                var killTimeout = null;
                var cordovaCheckInterval = null;
                var portProblem = false;

                function windowsKill(pid) {
                    self.log.debug('killing pid: ' + pid);
                    _crossSpawn2.default.sync('taskkill', ['/pid', pid, '/f', '/t']);

                    // We will look for other process which might have been created outside the
                    // process tree.
                    // Lets list all node.exe processes.
                    var out = _crossSpawn2.default.sync('wmic', ['process', 'where', 'caption="node.exe"', 'get', 'commandline,processid']).stdout.toString('utf-8').split('\n');
                    var args = self.prepareArguments();
                    // Lets mount regex.
                    var regexV1 = new RegExp(args.join('\\s+') + '\\s+(\\d+)', 'gm');
                    var regexV2 = new RegExp('"' + args.join('"\\s+"') + '"\\s+(\\d+)', 'gm');
                    // No we will check for those with the matching params.
                    out.forEach(function (line) {
                        var match = regexV1.exec(line) || regexV2.exec(line) || false;
                        if (match) {
                            self.log.debug('killing pid: ' + match[1]);
                            _crossSpawn2.default.sync('taskkill', ['/pid', match[1], '/f', '/t']);
                        }
                    });
                }

                function writeLog() {
                    _fs2.default.writeFileSync('meteor.log', log, 'UTF-8');
                }

                function clearTimeoutsAndIntervals() {
                    clearInterval(cordovaCheckInterval);
                    clearTimeout(buildTimeout);
                    clearTimeout(errorTimeout);
                    clearTimeout(messageTimeout);
                    clearTimeout(killTimeout);
                }

                var args = _this5.prepareArguments();

                _this5.log.info('running "meteor ' + args.join(' ') + '"... this might take a while');

                // Lets spawn meteor.
                var child = (0, _crossSpawn2.default)('meteor', args, {
                    env: (0, _assign2.default)({ METEOR_PRETTY_OUTPUT: 0, METEOR_NO_RELEASE_CHECK: 1 }, process.env),
                    cwd: _this5.$.env.paths.meteorApp.root
                }, { shell: true });

                // Kills the currently running meteor command.
                function kill() {
                    sll('');
                    child.kill('SIGKILL');
                    if (self.$.env.os.isWindows) {
                        windowsKill(child.pid);
                    }
                }

                function exit() {
                    killTimeout = setTimeout(function () {
                        clearTimeoutsAndIntervals();
                        desiredExit = true;
                        kill();
                        resolve();
                    }, 500);
                }

                function copyBuild() {
                    self.copyBuild().then(function () {
                        exit();
                    }).catch(function () {
                        clearTimeoutsAndIntervals();
                        kill();
                        writeLog();
                        reject('copy');
                    });
                }

                cordovaCheckInterval = setInterval(function () {
                    // Check if we already have cordova-build ready.
                    if (_this5.isCordovaBuildReady()) {
                        // If so, then exit immediately.
                        if (_this5.indexHTMLstrategy === _this5.indexHTMLStrategies.INDEX_FROM_CORDOVA_BUILD) {
                            copyBuild();
                        }
                    }
                }, 1000);

                child.stderr.on('data', function (chunk) {
                    var line = chunk.toString('UTF-8');
                    log += line + '\n';
                    if (errorTimeout) {
                        clearTimeout(errorTimeout);
                    }
                    // Do not exit if this is the warning for using --production.
                    // Output exceeds -> https://github.com/meteor/meteor/issues/8592
                    if (!~line.indexOf('--production') && !~line.indexOf('Output exceeds ')) {
                        // We will exit 1s after last error in stderr.
                        errorTimeout = setTimeout(function () {
                            clearTimeoutsAndIntervals();
                            kill();
                            writeLog();
                            reject('error');
                        }, 1000);
                    }
                });

                child.stdout.on('data', function (chunk) {
                    var line = chunk.toString('UTF-8');
                    if (!desiredExit && line.trim().replace(/[\n\r\t\v\f]+/gm, '') !== '') {
                        var linesToDisplay = line.trim().split('\n\r');
                        // Only display last line from the chunk.
                        var sanitizedLine = linesToDisplay.pop().replace(/[\n\r\t\v\f]+/gm, '');
                        sll(sanitizedLine);
                    }
                    log += line + '\n';
                    if (~line.indexOf('after_platform_add')) {
                        sll('');
                        _this5.log.info('done... 10%');
                    }

                    if (~line.indexOf('Local package version')) {
                        if (messageTimeout) {
                            clearTimeout(messageTimeout);
                        }
                        messageTimeout = setTimeout(function () {
                            sll('');
                            _this5.log.info('building in progress...');
                        }, 1500);
                    }

                    if (~line.indexOf('Preparing Cordova project')) {
                        sll('');
                        _this5.log.info('done... 60%');
                    }

                    if (~line.indexOf('Can\'t listen on port')) {
                        portProblem = true;
                    }

                    if (~line.indexOf('Your application has errors')) {
                        if (errorTimeout) {
                            clearTimeout(errorTimeout);
                        }
                        errorTimeout = setTimeout(function () {
                            clearTimeoutsAndIntervals();
                            kill();
                            writeLog();
                            reject('errorInApp');
                        }, 1000);
                    }

                    if (~line.indexOf('App running at')) {
                        copyBuild();
                    }
                });

                // When Meteor exits
                child.on('exit', function () {
                    sll('');
                    clearTimeoutsAndIntervals();
                    if (!desiredExit) {
                        writeLog();
                        if (portProblem) {
                            reject('port');
                        } else {
                            reject('exit');
                        }
                    }
                });

                buildTimeout = setTimeout(function () {
                    kill();
                    writeLog();
                    reject('timeout');
                }, _this5.$.env.options.buildTimeout ? _this5.$.env.options.buildTimeout * 1000 : 600000);
            });
        }

        /**
         * Replaces the DDP url that was used originally when Meteor was building the client.
         * @param {string} indexHtml - path to index.html from the client
         */

    }, {
        key: 'updateDdpUrl',
        value: function updateDdpUrl(indexHtml) {
            var content = void 0;
            var runtimeConfig = void 0;

            try {
                content = _fs2.default.readFileSync(indexHtml, 'UTF-8');
            } catch (e) {
                this.log.error('error loading index.html file: ' + e.message);
                process.exit(1);
            }
            if (!this.matcher.test(content)) {
                this.log.error('could not find runtime config in index file');
                process.exit(1);
            }

            try {
                var matches = content.match(this.matcher);
                runtimeConfig = JSON.parse(decodeURIComponent(matches[1]));
            } catch (e) {
                this.log.error('could not find runtime config in index file');
                process.exit(1);
            }

            if (this.$.env.options.ddpUrl.substr(-1, 1) !== '/') {
                this.$.env.options.ddpUrl += '/';
            }

            runtimeConfig.ROOT_URL = this.$.env.options.ddpUrl;
            runtimeConfig.DDP_DEFAULT_CONNECTION_URL = this.$.env.options.ddpUrl;

            content = content.replace(this.replacer, '$1"' + encodeURIComponent((0, _stringify2.default)(runtimeConfig)) + '"$3');

            try {
                _fs2.default.writeFileSync(indexHtml, content);
            } catch (e) {
                this.log.error('error writing index.html file: ' + e.message);
                process.exit(1);
            }
            this.log.info('successfully updated ddp string in the runtime config of a mobile build' + (' to ' + this.$.env.options.ddpUrl));
        }

        /**
         * Prepares the arguments passed to `meteor` command.
         * @returns {string[]}
         */

    }, {
        key: 'prepareArguments',
        value: function prepareArguments() {
            var args = ['run', '--verbose', '--mobile-server=' + this.$.env.options.ddpUrl];
            if (this.$.env.isProductionBuild()) {
                args.push('--production');
            }
            args.push('-p');
            if (this.$.env.options.port) {
                args.push(this.$.env.options.port);
            } else {
                args.push('3080');
            }
            if (this.$.env.options.meteorSettings) {
                args.push('--settings', this.$.env.options.meteorSettings);
            }
            return args;
        }

        /**
         * Validates the mobile build and copies it into electron app.
         */

    }, {
        key: 'copyBuild',
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
                var prefix, copyPathPostfix, indexHtml, cordovaBuild, cordovaBuildIndex, cordovaBuildProgramJson, programJson;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                this.log.debug('clearing build dir');
                                _context6.prev = 1;
                                _context6.next = 4;
                                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.meteorApp);

                            case 4:
                                _context6.next = 9;
                                break;

                            case 6:
                                _context6.prev = 6;
                                _context6.t0 = _context6['catch'](1);
                                throw new Error(_context6.t0);

                            case 9:
                                prefix = 'cordovaBuild';
                                copyPathPostfix = '';

                                if (!(this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 28;
                                    break;
                                }

                                prefix = 'webCordova';
                                copyPathPostfix = _path2.default.sep + '*';
                                indexHtml = void 0;
                                _context6.prev = 15;

                                _fs2.default.mkdir(this.$.env.paths.electronApp.meteorApp);
                                _context6.next = 19;
                                return this.acquireIndex();

                            case 19:
                                indexHtml = _context6.sent;

                                _fs2.default.writeFileSync(this.$.env.paths.electronApp.meteorAppIndex, indexHtml);
                                this.log.info('successfully downloaded index.html from running meteor app');
                                _context6.next = 28;
                                break;

                            case 24:
                                _context6.prev = 24;
                                _context6.t1 = _context6['catch'](15);

                                this.log.error('error while trying to download index.html for web.cordova, ' + 'be sure that you are running a mobile target or with' + ' --mobile-server: ', _context6.t1);
                                throw _context6.t1;

                            case 28:
                                cordovaBuild = this.$.env.paths.meteorApp[prefix];
                                cordovaBuildIndex = this.$.env.paths.meteorApp.cordovaBuildIndex;
                                cordovaBuildProgramJson = this.$.env.paths.meteorApp[prefix + 'ProgramJson'];

                                if (this.$.utils.exists(cordovaBuild)) {
                                    _context6.next = 35;
                                    break;
                                }

                                this.log.error('no mobile build found at ' + cordovaBuild);
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 35:
                                if (this.$.utils.exists(cordovaBuildProgramJson)) {
                                    _context6.next = 39;
                                    break;
                                }

                                this.log.error('no program.json found in mobile build found at ' + ('' + cordovaBuild));
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 39:
                                if (!(this.indexHTMLstrategy !== this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 44;
                                    break;
                                }

                                if (this.$.utils.exists(cordovaBuildIndex)) {
                                    _context6.next = 44;
                                    break;
                                }

                                this.log.error('no index.html found in cordova build found at ' + ('' + cordovaBuild));
                                this.log.error('are you sure you did run meteor with --mobile-server?');
                                throw new Error('required file not present');

                            case 44:

                                this.log.verbose('copying mobile build');
                                _shelljs2.default.cp('-R', '' + cordovaBuild + copyPathPostfix, this.$.env.paths.electronApp.meteorApp);

                                // Because of various permission problems here we try to clear te path by clearing
                                // all possible restrictions.
                                _shelljs2.default.chmod('-R', '777', this.$.env.paths.electronApp.meteorApp);
                                if (this.$.env.os.isWindows) {
                                    _shelljs2.default.exec('attrib -r ' + this.$.env.paths.electronApp.meteorApp + _path2.default.sep + '*.* /s');
                                }

                                if (!(this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER)) {
                                    _context6.next = 62;
                                    break;
                                }

                                programJson = void 0;
                                _context6.prev = 50;
                                _context6.next = 53;
                                return this.acquireManifest();

                            case 53:
                                programJson = _context6.sent;

                                _fs2.default.writeFileSync(this.$.env.paths.electronApp.meteorAppProgramJson, (0, _stringify2.default)(programJson, null, 4));
                                this.log.info('successfully downloaded manifest.json from running meteor app');
                                _context6.next = 62;
                                break;

                            case 58:
                                _context6.prev = 58;
                                _context6.t2 = _context6['catch'](50);

                                this.log.error('error while trying to download manifest.json for web.cordova,' + ' be sure that you are running a mobile target or with' + ' --mobile-server: ', _context6.t2);
                                throw _context6.t2;

                            case 62:

                                this.log.info('mobile build copied to electron app');

                                this.log.debug('copy cordova.js to meteor build');
                                _shelljs2.default.cp(join(__dirname, '..', 'skeleton', 'cordova.js'), this.$.env.paths.electronApp.meteorApp);

                            case 65:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [[1, 6], [15, 24], [50, 58]]);
            }));

            function copyBuild() {
                return _ref6.apply(this, arguments);
            }

            return copyBuild;
        }()

        /**
         * Injects Meteor.isDesktop
         */

    }, {
        key: 'injectIsDesktop',
        value: function injectIsDesktop() {
            var _this6 = this;

            this.log.info('injecting isDesktop');

            var manifestJsonPath = this.$.env.paths.meteorApp.cordovaBuildProgramJson;
            if (this.indexHTMLstrategy === this.indexHTMLStrategies.INDEX_FROM_RUNNING_SERVER) {
                manifestJsonPath = this.$.env.paths.meteorApp.webCordovaProgramJson;
            }

            try {
                (function () {
                    var manifest = JSON.parse(_fs2.default.readFileSync(manifestJsonPath, 'UTF-8')).manifest;
                    var injected = false;
                    var injectedStartupDidComplete = false;
                    var result = null;

                    // We will search in every .js file in the manifest.
                    // We could probably detect whether this is a dev or production build and only search in
                    // the correct files, but for now this should be fine.
                    manifest.forEach(function (file) {
                        var fileContents = void 0;
                        // Hacky way of setting isDesktop.
                        if (file.type === 'js') {
                            fileContents = _fs2.default.readFileSync(join(_this6.$.env.paths.electronApp.meteorApp, file.path), 'UTF-8');
                            result = _this6.injector.processFileContents(fileContents);

                            fileContents = result.fileContents;
                            injectedStartupDidComplete = result.injectedStartupDidComplete ? true : injectedStartupDidComplete;
                            injected = result.injected ? true : injected;

                            _fs2.default.writeFileSync(join(_this6.$.env.paths.electronApp.meteorApp, file.path), fileContents);
                        }
                    });

                    if (!injected) {
                        _this6.log.error('error injecting isDesktop global var.');
                        process.exit(1);
                    }
                    if (!injectedStartupDidComplete) {
                        _this6.log.error('error injecting isDesktop for startupDidComplete');
                        process.exit(1);
                    }
                })();
            } catch (e) {
                this.log.error('error occurred while injecting isDesktop: ', e);
                process.exit(1);
            }
            this.log.info('injected successfully');
        }

        /**
         * Builds, modifies and copies the meteor app to electron app.
         */

    }, {
        key: 'build',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                this.log.info('checking for any mobile platform');
                                _context7.prev = 1;
                                _context7.next = 4;
                                return this.checkPreconditions();

                            case 4:
                                _context7.next = 10;
                                break;

                            case 6:
                                _context7.prev = 6;
                                _context7.t0 = _context7['catch'](1);

                                this.log.error('error occurred during checking preconditions: ', _context7.t0);
                                process.exit(1);

                            case 10:

                                this.log.info('building meteor app');

                                if (this.$.env.options.skipMobileBuild) {
                                    _context7.next = 41;
                                    break;
                                }

                                _context7.prev = 12;
                                _context7.next = 15;
                                return this.buildMobileTarget();

                            case 15:
                                _context7.next = 39;
                                break;

                            case 17:
                                _context7.prev = 17;
                                _context7.t1 = _context7['catch'](12);
                                _context7.t2 = _context7.t1;
                                _context7.next = _context7.t2 === 'timeout' ? 22 : _context7.t2 === 'error' ? 24 : _context7.t2 === 'errorInApp' ? 26 : _context7.t2 === 'port' ? 28 : _context7.t2 === 'exit' ? 30 : _context7.t2 === 'copy' ? 32 : 34;
                                break;

                            case 22:
                                this.log.error('timeout while building, log has been written to meteor.log');
                                return _context7.abrupt('break', 35);

                            case 24:
                                this.log.error('some errors were reported during build, check meteor.log for more' + ' info');
                                return _context7.abrupt('break', 35);

                            case 26:
                                this.log.error('your meteor app has errors - look into meteor.log for more' + ' info');
                                return _context7.abrupt('break', 35);

                            case 28:
                                this.log.error('your port 3080 is currently used (you probably have this or other ' + 'meteor project running?), use `-t` or `--meteor-port` to use ' + 'different port while building');
                                return _context7.abrupt('break', 35);

                            case 30:
                                this.log.error('meteor cmd exited unexpectedly, log has been written to meteor.log');
                                return _context7.abrupt('break', 35);

                            case 32:
                                this.log.error('error encountered when copying the build');
                                return _context7.abrupt('break', 35);

                            case 34:
                                this.log.error('error occurred during building mobile target', _context7.t1);

                            case 35:
                                if (!this.mobilePlatform) {
                                    _context7.next = 38;
                                    break;
                                }

                                _context7.next = 38;
                                return this.removeMobilePlatform(this.mobilePlatform);

                            case 38:
                                process.exit(1);

                            case 39:
                                _context7.next = 50;
                                break;

                            case 41:
                                this.indexHTMLstrategy = this.chooseStrategy();
                                _context7.prev = 42;
                                _context7.next = 45;
                                return this.copyBuild();

                            case 45:
                                _context7.next = 50;
                                break;

                            case 47:
                                _context7.prev = 47;
                                _context7.t3 = _context7['catch'](42);

                                process.exit(1);

                            case 50:

                                this.injectIsDesktop();

                                this.changeDdpUrl();

                                _context7.prev = 52;
                                _context7.next = 55;
                                return this.packToAsar();

                            case 55:
                                _context7.next = 61;
                                break;

                            case 57:
                                _context7.prev = 57;
                                _context7.t4 = _context7['catch'](52);

                                this.log.error('error while packing meteor app to asar');
                                process.exit(1);

                            case 61:

                                this.log.info('meteor build finished');

                                if (!this.mobilePlatform) {
                                    _context7.next = 65;
                                    break;
                                }

                                _context7.next = 65;
                                return this.removeMobilePlatform(this.mobilePlatform);

                            case 65:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this, [[1, 6], [12, 17], [42, 47], [52, 57]]);
            }));

            function build() {
                return _ref7.apply(this, arguments);
            }

            return build;
        }()
    }, {
        key: 'changeDdpUrl',
        value: function changeDdpUrl() {
            if (this.$.env.options.ddpUrl !== null) {
                try {
                    this.updateDdpUrl(this.$.env.paths.electronApp.meteorAppIndex);
                } catch (e) {
                    this.log.error('error while trying to change the ddp url: ' + e.message);
                }
            }
        }
    }, {
        key: 'packToAsar',
        value: function packToAsar() {
            var _this7 = this;

            this.log.info('packing meteor app to asar archive');
            return new _promise2.default(function (resolve, reject) {
                return _asar2.default.createPackage(_this7.$.env.paths.electronApp.meteorApp, _path2.default.join(_this7.$.env.paths.electronApp.root, 'meteor.asar'), function () {
                    // On Windows some files might still be blocked. Giving a tick for them to be
                    // ready for deletion.
                    (0, _setImmediate3.default)(function () {
                        _this7.log.verbose('clearing meteor app after packing');
                        _this7.$.utils.rmWithRetries('-rf', _this7.$.env.paths.electronApp.meteorApp).then(function () {
                            resolve();
                        }).catch(function (e) {
                            reject(e);
                        });
                    });
                });
            });
        }
    }]);
    return MeteorApp;
}();

exports.default = MeteorApp;
//# sourceMappingURL=data:application/json;base64,