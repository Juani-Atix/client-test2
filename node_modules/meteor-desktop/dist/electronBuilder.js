'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _electronBuilder = require('electron-builder');

var _yarn = require('electron-builder/out/yarn');

var _readPackageJson = require('electron-builder/out/util/readPackageJson');

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrapper for electron-builder.
 */
var InstallerBuilder = function () {

    /**
     * @param {MeteorDesktop} $ - context
     *
     * @constructor
     */
    function InstallerBuilder($) {
        (0, _classCallCheck3.default)(this, InstallerBuilder);

        this.log = new _log2.default('electronBuilder');
        this.$ = $;
        this.firstPass = true;
        this.lastRebuild = {};
    }

    /**
     * Calls npm rebuild from electron-builder.
     * @param {string} arch
     * @param {string} platform
     * @returns {Promise}
     */


    (0, _createClass3.default)(InstallerBuilder, [{
        key: 'installOrRebuild',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(arch) {
                var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.platform;
                var devMetadata, results;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                this.log.debug('calling installOrRebuild from electron-builder for arch ' + arch);
                                _context.next = 3;
                                return (0, _readPackageJson.readPackageJson)(this.$.env.paths.meteorApp.packageJson);

                            case 3:
                                devMetadata = _context.sent;
                                _context.next = 6;
                                return (0, _readPackageJson.getElectronVersion)(devMetadata, this.$.env.paths.meteorApp.root);

                            case 6:
                                results = _context.sent;

                                this.lastRebuild = { platform: platform, arch: arch };
                                _context.next = 10;
                                return (0, _yarn.installOrRebuild)(this.$.desktop.getSettings().builderOptions || {}, this.$.env.paths.electronApp.root, results, platform, arch, false);

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function installOrRebuild(_x) {
                return _ref.apply(this, arguments);
            }

            return installOrRebuild;
        }()

        /**
         * Callback invoked before build is made. Ensures that app.asar have the right rebuilt
         * node_modules.
         *
         * @param {Object} context
         * @returns {Promise}
         */

    }, {
        key: 'beforeBuild',
        value: function beforeBuild(context) {
            var _this = this;

            return new _promise2.default(function (resolve) {
                var platformMatches = process.platform === context.platform.nodeName;
                var rebuild = platformMatches && context.arch !== _this.lastRebuild.arch;
                if (!platformMatches) {
                    _this.log.warn('skipping dependencies rebuild because platform is different, if you have native ' + 'node modules as your app dependencies you should od the build on the target platform only');
                }

                if (!rebuild) {
                    _this.moveNodeModulesOut();
                    resolve(false);
                } else {
                    _this.installOrRebuild(context.arch, context.platform.nodeName).then(function () {
                        _this.$.electronApp.scaffold.createAppRoot();
                        _this.$.electronApp.scaffold.copySkeletonApp();
                        return _this.$.electronApp.packSkeletonToAsar([_this.$.env.paths.electronApp.meteorAsar, _this.$.env.paths.electronApp.desktopAsar, _this.$.env.paths.electronApp.extracted]);
                    }).then(function () {
                        _this.moveNodeModulesOut();
                        resolve(false);
                    });
                }
            });
        }

        /**
         * Callback to be invoked after packing. Restores node_modules to the .desktop-build.
         * @returns {Promise}
         */

    }, {
        key: 'afterPack',
        value: function afterPack() {
            var _this2 = this;

            return new _promise2.default(function (resolve) {
                _this2.log.debug('moving node_modules back');
                // Move node_modules back.
                _shelljs2.default.mv(_this2.$.env.paths.electronApp.tmpNodeModules, _this2.$.env.paths.electronApp.nodeModules);

                if (_this2.firstPass) {
                    _this2.firstPass = false;
                }

                resolve();
            });
        }

        /**
         * Prepares the target object passed to the electron-builder.
         *
         * @returns {Map<Platform, Map<Arch, Array<string>>>}
         */

    }, {
        key: 'prepareTargets',
        value: function prepareTargets() {
            var arch = this.$.env.options.ia32 ? 'ia32' : 'x64';
            arch = this.$.env.options.allArchs ? 'all' : arch;

            var targets = [];

            if (this.$.env.options.win) {
                targets.push(_electronBuilder.Platform.WINDOWS);
            }
            if (this.$.env.options.linux) {
                targets.push(_electronBuilder.Platform.LINUX);
            }
            if (this.$.env.options.mac) {
                targets.push(_electronBuilder.Platform.MAC);
            }

            if (targets.length === 0) {
                if (this.$.env.os.isWindows) {
                    targets.push(_electronBuilder.Platform.WINDOWS);
                } else if (this.$.env.os.isLinux) {
                    targets.push(_electronBuilder.Platform.LINUX);
                } else {
                    targets.push(_electronBuilder.Platform.MAC);
                }
            }
            return (0, _electronBuilder.createTargets)(targets, null, arch);
        }
    }, {
        key: 'build',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
                var settings, builderOptions;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                settings = this.$.desktop.getSettings();

                                if (!('builderOptions' in settings)) {
                                    this.log.error('no builderOptions in settings.json, aborting');
                                    process.exit(1);
                                }

                                builderOptions = (0, _assign2.default)({}, settings.builderOptions);


                                builderOptions.asar = false;
                                builderOptions.npmRebuild = true;

                                builderOptions.beforeBuild = this.beforeBuild.bind(this);
                                builderOptions.afterPack = this.afterPack.bind(this);

                                builderOptions.directories = {
                                    app: this.$.env.paths.electronApp.root,
                                    output: _path2.default.join(this.$.env.options.output, this.$.env.paths.installerDir)
                                };

                                _context2.prev = 8;
                                _context2.next = 11;
                                return (0, _electronBuilder.build)({
                                    targets: this.prepareTargets(),
                                    config: builderOptions
                                });

                            case 11:
                                _context2.next = 16;
                                break;

                            case 13:
                                _context2.prev = 13;
                                _context2.t0 = _context2['catch'](8);

                                this.log.error('error while building installer: ', _context2.t0);

                            case 16:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[8, 13]]);
            }));

            function build() {
                return _ref2.apply(this, arguments);
            }

            return build;
        }()
    }, {
        key: 'moveNodeModulesOut',
        value: function moveNodeModulesOut() {
            this.log.debug('moving node_modules out, because we have them already in' + ' app.asar');
            _shelljs2.default.mv(this.$.env.paths.electronApp.nodeModules, this.$.env.paths.electronApp.tmpNodeModules);
        }
    }]);
    return InstallerBuilder;
}();

exports.default = InstallerBuilder;
//# sourceMappingURL=data:application/json;base64,